// source: machine.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.machine.CollectionRequest', null, global);
goog.exportSymbol('proto.machine.FluidDetails', null, global);
goog.exportSymbol('proto.machine.FluidRequest', null, global);
goog.exportSymbol('proto.machine.FluidType', null, global);
goog.exportSymbol('proto.machine.Mode', null, global);
goog.exportSymbol('proto.machine.MovementDetails', null, global);
goog.exportSymbol('proto.machine.PipetteState', null, global);
goog.exportSymbol('proto.machine.SessionStatus', null, global);
goog.exportSymbol('proto.machine.SolenoidValve', null, global);
goog.exportSymbol('proto.machine.StateReport', null, global);
goog.exportSymbol('proto.machine.StateReportList', null, global);
goog.exportSymbol('proto.machine.Status', null, global);
goog.exportSymbol('proto.machine.StreamStatus', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.machine.PipetteState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.machine.PipetteState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.machine.PipetteState.displayName = 'proto.machine.PipetteState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.machine.CollectionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.machine.CollectionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.machine.CollectionRequest.displayName = 'proto.machine.CollectionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.machine.MovementDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.machine.MovementDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.machine.MovementDetails.displayName = 'proto.machine.MovementDetails';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.machine.FluidRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.machine.FluidRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.machine.FluidRequest.displayName = 'proto.machine.FluidRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.machine.FluidDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.machine.FluidDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.machine.FluidDetails.displayName = 'proto.machine.FluidDetails';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.machine.StateReport = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.machine.StateReport, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.machine.StateReport.displayName = 'proto.machine.StateReport';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.machine.StateReportList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.machine.StateReportList.repeatedFields_, null);
};
goog.inherits(proto.machine.StateReportList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.machine.StateReportList.displayName = 'proto.machine.StateReportList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.machine.SessionStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.machine.SessionStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.machine.SessionStatus.displayName = 'proto.machine.SessionStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.machine.StreamStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.machine.StreamStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.machine.StreamStatus.displayName = 'proto.machine.StreamStatus';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.machine.PipetteState.prototype.toObject = function(opt_includeInstance) {
  return proto.machine.PipetteState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.machine.PipetteState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.machine.PipetteState.toObject = function(includeInstance, msg) {
  var f, obj = {
    spent: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    vialHeld: jspb.Message.getFieldWithDefault(msg, 2, 0),
    volumeTargetUl: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    dispenseRequestNumber: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.machine.PipetteState}
 */
proto.machine.PipetteState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.machine.PipetteState;
  return proto.machine.PipetteState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.machine.PipetteState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.machine.PipetteState}
 */
proto.machine.PipetteState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSpent(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVialHeld(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setVolumeTargetUl(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDispenseRequestNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.machine.PipetteState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.machine.PipetteState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.machine.PipetteState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.machine.PipetteState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpent();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getVialHeld();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getVolumeTargetUl();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getDispenseRequestNumber();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional bool spent = 1;
 * @return {boolean}
 */
proto.machine.PipetteState.prototype.getSpent = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.machine.PipetteState} returns this
 */
proto.machine.PipetteState.prototype.setSpent = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional uint32 vial_held = 2;
 * @return {number}
 */
proto.machine.PipetteState.prototype.getVialHeld = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.machine.PipetteState} returns this
 */
proto.machine.PipetteState.prototype.setVialHeld = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional float volume_target_ul = 3;
 * @return {number}
 */
proto.machine.PipetteState.prototype.getVolumeTargetUl = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.machine.PipetteState} returns this
 */
proto.machine.PipetteState.prototype.setVolumeTargetUl = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional uint32 dispense_request_number = 4;
 * @return {number}
 */
proto.machine.PipetteState.prototype.getDispenseRequestNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.machine.PipetteState} returns this
 */
proto.machine.PipetteState.prototype.setDispenseRequestNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.machine.CollectionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.machine.CollectionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.machine.CollectionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.machine.CollectionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    completed: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    requestNumber: jspb.Message.getFieldWithDefault(msg, 2, 0),
    vialNumber: jspb.Message.getFieldWithDefault(msg, 3, 0),
    volumeUl: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.machine.CollectionRequest}
 */
proto.machine.CollectionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.machine.CollectionRequest;
  return proto.machine.CollectionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.machine.CollectionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.machine.CollectionRequest}
 */
proto.machine.CollectionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCompleted(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRequestNumber(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setVialNumber(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setVolumeUl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.machine.CollectionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.machine.CollectionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.machine.CollectionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.machine.CollectionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCompleted();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getRequestNumber();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getVialNumber();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getVolumeUl();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * optional bool completed = 1;
 * @return {boolean}
 */
proto.machine.CollectionRequest.prototype.getCompleted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.machine.CollectionRequest} returns this
 */
proto.machine.CollectionRequest.prototype.setCompleted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional uint64 request_number = 2;
 * @return {number}
 */
proto.machine.CollectionRequest.prototype.getRequestNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.machine.CollectionRequest} returns this
 */
proto.machine.CollectionRequest.prototype.setRequestNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 vial_number = 3;
 * @return {number}
 */
proto.machine.CollectionRequest.prototype.getVialNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.machine.CollectionRequest} returns this
 */
proto.machine.CollectionRequest.prototype.setVialNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional float volume_ul = 4;
 * @return {number}
 */
proto.machine.CollectionRequest.prototype.getVolumeUl = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.machine.CollectionRequest} returns this
 */
proto.machine.CollectionRequest.prototype.setVolumeUl = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.machine.MovementDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.machine.MovementDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.machine.MovementDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.machine.MovementDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    targetXUnit: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    targetYUnit: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    targetZIk: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    targetRingDeg: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 0.0),
    targetYawDeg: jspb.Message.getFloatingPointFieldWithDefault(msg, 11, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.machine.MovementDetails}
 */
proto.machine.MovementDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.machine.MovementDetails;
  return proto.machine.MovementDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.machine.MovementDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.machine.MovementDetails}
 */
proto.machine.MovementDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTargetXUnit(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTargetYUnit(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTargetZIk(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTargetRingDeg(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTargetYawDeg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.machine.MovementDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.machine.MovementDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.machine.MovementDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.machine.MovementDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTargetXUnit();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getTargetYUnit();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getTargetZIk();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getTargetRingDeg();
  if (f !== 0.0) {
    writer.writeFloat(
      10,
      f
    );
  }
  f = message.getTargetYawDeg();
  if (f !== 0.0) {
    writer.writeFloat(
      11,
      f
    );
  }
};


/**
 * optional float target_x_unit = 1;
 * @return {number}
 */
proto.machine.MovementDetails.prototype.getTargetXUnit = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.machine.MovementDetails} returns this
 */
proto.machine.MovementDetails.prototype.setTargetXUnit = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float target_y_unit = 2;
 * @return {number}
 */
proto.machine.MovementDetails.prototype.getTargetYUnit = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.machine.MovementDetails} returns this
 */
proto.machine.MovementDetails.prototype.setTargetYUnit = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float target_z_ik = 5;
 * @return {number}
 */
proto.machine.MovementDetails.prototype.getTargetZIk = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.machine.MovementDetails} returns this
 */
proto.machine.MovementDetails.prototype.setTargetZIk = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional float target_ring_deg = 10;
 * @return {number}
 */
proto.machine.MovementDetails.prototype.getTargetRingDeg = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.machine.MovementDetails} returns this
 */
proto.machine.MovementDetails.prototype.setTargetRingDeg = function(value) {
  return jspb.Message.setProto3FloatField(this, 10, value);
};


/**
 * optional float target_yaw_deg = 11;
 * @return {number}
 */
proto.machine.MovementDetails.prototype.getTargetYawDeg = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.machine.MovementDetails} returns this
 */
proto.machine.MovementDetails.prototype.setTargetYawDeg = function(value) {
  return jspb.Message.setProto3FloatField(this, 11, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.machine.FluidRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.machine.FluidRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.machine.FluidRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.machine.FluidRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    fluidtype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    volumeMl: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    complete: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    openDrain: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.machine.FluidRequest}
 */
proto.machine.FluidRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.machine.FluidRequest;
  return proto.machine.FluidRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.machine.FluidRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.machine.FluidRequest}
 */
proto.machine.FluidRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.machine.FluidType} */ (reader.readEnum());
      msg.setFluidtype(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setVolumeMl(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setComplete(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOpenDrain(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.machine.FluidRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.machine.FluidRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.machine.FluidRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.machine.FluidRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFluidtype();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getVolumeMl();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getComplete();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getOpenDrain();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional FluidType fluidType = 1;
 * @return {!proto.machine.FluidType}
 */
proto.machine.FluidRequest.prototype.getFluidtype = function() {
  return /** @type {!proto.machine.FluidType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.machine.FluidType} value
 * @return {!proto.machine.FluidRequest} returns this
 */
proto.machine.FluidRequest.prototype.setFluidtype = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional float volume_ml = 2;
 * @return {number}
 */
proto.machine.FluidRequest.prototype.getVolumeMl = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.machine.FluidRequest} returns this
 */
proto.machine.FluidRequest.prototype.setVolumeMl = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional bool complete = 3;
 * @return {boolean}
 */
proto.machine.FluidRequest.prototype.getComplete = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.machine.FluidRequest} returns this
 */
proto.machine.FluidRequest.prototype.setComplete = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool open_drain = 4;
 * @return {boolean}
 */
proto.machine.FluidRequest.prototype.getOpenDrain = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.machine.FluidRequest} returns this
 */
proto.machine.FluidRequest.prototype.setOpenDrain = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.machine.FluidDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.machine.FluidDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.machine.FluidDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.machine.FluidDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    bowlFluidLevelMl: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.machine.FluidDetails}
 */
proto.machine.FluidDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.machine.FluidDetails;
  return proto.machine.FluidDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.machine.FluidDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.machine.FluidDetails}
 */
proto.machine.FluidDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBowlFluidLevelMl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.machine.FluidDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.machine.FluidDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.machine.FluidDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.machine.FluidDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBowlFluidLevelMl();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
};


/**
 * optional float bowl_fluid_level_ml = 1;
 * @return {number}
 */
proto.machine.FluidDetails.prototype.getBowlFluidLevelMl = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.machine.FluidDetails} returns this
 */
proto.machine.FluidDetails.prototype.setBowlFluidLevelMl = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.machine.StateReport.prototype.toObject = function(opt_includeInstance) {
  return proto.machine.StateReport.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.machine.StateReport} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.machine.StateReport.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestampUnixMicros: jspb.Message.getFieldWithDefault(msg, 2, 0),
    mode: jspb.Message.getFieldWithDefault(msg, 4, 0),
    status: jspb.Message.getFieldWithDefault(msg, 5, 0),
    lightsOn: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    pipetteState: (f = msg.getPipetteState()) && proto.machine.PipetteState.toObject(includeInstance, f),
    collectionRequest: (f = msg.getCollectionRequest()) && proto.machine.CollectionRequest.toObject(includeInstance, f),
    movementDetails: (f = msg.getMovementDetails()) && proto.machine.MovementDetails.toObject(includeInstance, f),
    fluidRequest: (f = msg.getFluidRequest()) && proto.machine.FluidRequest.toObject(includeInstance, f),
    fluidDetails: (f = msg.getFluidDetails()) && proto.machine.FluidDetails.toObject(includeInstance, f),
    paused: jspb.Message.getBooleanFieldWithDefault(msg, 50, false),
    timestampReadable: jspb.Message.getFieldWithDefault(msg, 51, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.machine.StateReport}
 */
proto.machine.StateReport.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.machine.StateReport;
  return proto.machine.StateReport.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.machine.StateReport} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.machine.StateReport}
 */
proto.machine.StateReport.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestampUnixMicros(value);
      break;
    case 4:
      var value = /** @type {!proto.machine.Mode} */ (reader.readEnum());
      msg.setMode(value);
      break;
    case 5:
      var value = /** @type {!proto.machine.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLightsOn(value);
      break;
    case 10:
      var value = new proto.machine.PipetteState;
      reader.readMessage(value,proto.machine.PipetteState.deserializeBinaryFromReader);
      msg.setPipetteState(value);
      break;
    case 11:
      var value = new proto.machine.CollectionRequest;
      reader.readMessage(value,proto.machine.CollectionRequest.deserializeBinaryFromReader);
      msg.setCollectionRequest(value);
      break;
    case 12:
      var value = new proto.machine.MovementDetails;
      reader.readMessage(value,proto.machine.MovementDetails.deserializeBinaryFromReader);
      msg.setMovementDetails(value);
      break;
    case 13:
      var value = new proto.machine.FluidRequest;
      reader.readMessage(value,proto.machine.FluidRequest.deserializeBinaryFromReader);
      msg.setFluidRequest(value);
      break;
    case 14:
      var value = new proto.machine.FluidDetails;
      reader.readMessage(value,proto.machine.FluidDetails.deserializeBinaryFromReader);
      msg.setFluidDetails(value);
      break;
    case 50:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPaused(value);
      break;
    case 51:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimestampReadable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.machine.StateReport.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.machine.StateReport.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.machine.StateReport} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.machine.StateReport.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestampUnixMicros();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getMode();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getLightsOn();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getPipetteState();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.machine.PipetteState.serializeBinaryToWriter
    );
  }
  f = message.getCollectionRequest();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.machine.CollectionRequest.serializeBinaryToWriter
    );
  }
  f = message.getMovementDetails();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.machine.MovementDetails.serializeBinaryToWriter
    );
  }
  f = message.getFluidRequest();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.machine.FluidRequest.serializeBinaryToWriter
    );
  }
  f = message.getFluidDetails();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.machine.FluidDetails.serializeBinaryToWriter
    );
  }
  f = message.getPaused();
  if (f) {
    writer.writeBool(
      50,
      f
    );
  }
  f = message.getTimestampReadable();
  if (f.length > 0) {
    writer.writeString(
      51,
      f
    );
  }
};


/**
 * optional uint64 timestamp_unix_micros = 2;
 * @return {number}
 */
proto.machine.StateReport.prototype.getTimestampUnixMicros = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.machine.StateReport} returns this
 */
proto.machine.StateReport.prototype.setTimestampUnixMicros = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional Mode mode = 4;
 * @return {!proto.machine.Mode}
 */
proto.machine.StateReport.prototype.getMode = function() {
  return /** @type {!proto.machine.Mode} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.machine.Mode} value
 * @return {!proto.machine.StateReport} returns this
 */
proto.machine.StateReport.prototype.setMode = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional Status status = 5;
 * @return {!proto.machine.Status}
 */
proto.machine.StateReport.prototype.getStatus = function() {
  return /** @type {!proto.machine.Status} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.machine.Status} value
 * @return {!proto.machine.StateReport} returns this
 */
proto.machine.StateReport.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional bool lights_on = 6;
 * @return {boolean}
 */
proto.machine.StateReport.prototype.getLightsOn = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.machine.StateReport} returns this
 */
proto.machine.StateReport.prototype.setLightsOn = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional PipetteState pipette_state = 10;
 * @return {?proto.machine.PipetteState}
 */
proto.machine.StateReport.prototype.getPipetteState = function() {
  return /** @type{?proto.machine.PipetteState} */ (
    jspb.Message.getWrapperField(this, proto.machine.PipetteState, 10));
};


/**
 * @param {?proto.machine.PipetteState|undefined} value
 * @return {!proto.machine.StateReport} returns this
*/
proto.machine.StateReport.prototype.setPipetteState = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.machine.StateReport} returns this
 */
proto.machine.StateReport.prototype.clearPipetteState = function() {
  return this.setPipetteState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.machine.StateReport.prototype.hasPipetteState = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional CollectionRequest collection_request = 11;
 * @return {?proto.machine.CollectionRequest}
 */
proto.machine.StateReport.prototype.getCollectionRequest = function() {
  return /** @type{?proto.machine.CollectionRequest} */ (
    jspb.Message.getWrapperField(this, proto.machine.CollectionRequest, 11));
};


/**
 * @param {?proto.machine.CollectionRequest|undefined} value
 * @return {!proto.machine.StateReport} returns this
*/
proto.machine.StateReport.prototype.setCollectionRequest = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.machine.StateReport} returns this
 */
proto.machine.StateReport.prototype.clearCollectionRequest = function() {
  return this.setCollectionRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.machine.StateReport.prototype.hasCollectionRequest = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional MovementDetails movement_details = 12;
 * @return {?proto.machine.MovementDetails}
 */
proto.machine.StateReport.prototype.getMovementDetails = function() {
  return /** @type{?proto.machine.MovementDetails} */ (
    jspb.Message.getWrapperField(this, proto.machine.MovementDetails, 12));
};


/**
 * @param {?proto.machine.MovementDetails|undefined} value
 * @return {!proto.machine.StateReport} returns this
*/
proto.machine.StateReport.prototype.setMovementDetails = function(value) {
  return jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.machine.StateReport} returns this
 */
proto.machine.StateReport.prototype.clearMovementDetails = function() {
  return this.setMovementDetails(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.machine.StateReport.prototype.hasMovementDetails = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional FluidRequest fluid_request = 13;
 * @return {?proto.machine.FluidRequest}
 */
proto.machine.StateReport.prototype.getFluidRequest = function() {
  return /** @type{?proto.machine.FluidRequest} */ (
    jspb.Message.getWrapperField(this, proto.machine.FluidRequest, 13));
};


/**
 * @param {?proto.machine.FluidRequest|undefined} value
 * @return {!proto.machine.StateReport} returns this
*/
proto.machine.StateReport.prototype.setFluidRequest = function(value) {
  return jspb.Message.setWrapperField(this, 13, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.machine.StateReport} returns this
 */
proto.machine.StateReport.prototype.clearFluidRequest = function() {
  return this.setFluidRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.machine.StateReport.prototype.hasFluidRequest = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional FluidDetails fluid_details = 14;
 * @return {?proto.machine.FluidDetails}
 */
proto.machine.StateReport.prototype.getFluidDetails = function() {
  return /** @type{?proto.machine.FluidDetails} */ (
    jspb.Message.getWrapperField(this, proto.machine.FluidDetails, 14));
};


/**
 * @param {?proto.machine.FluidDetails|undefined} value
 * @return {!proto.machine.StateReport} returns this
*/
proto.machine.StateReport.prototype.setFluidDetails = function(value) {
  return jspb.Message.setWrapperField(this, 14, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.machine.StateReport} returns this
 */
proto.machine.StateReport.prototype.clearFluidDetails = function() {
  return this.setFluidDetails(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.machine.StateReport.prototype.hasFluidDetails = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional bool paused = 50;
 * @return {boolean}
 */
proto.machine.StateReport.prototype.getPaused = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 50, false));
};


/**
 * @param {boolean} value
 * @return {!proto.machine.StateReport} returns this
 */
proto.machine.StateReport.prototype.setPaused = function(value) {
  return jspb.Message.setProto3BooleanField(this, 50, value);
};


/**
 * optional string timestamp_readable = 51;
 * @return {string}
 */
proto.machine.StateReport.prototype.getTimestampReadable = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 51, ""));
};


/**
 * @param {string} value
 * @return {!proto.machine.StateReport} returns this
 */
proto.machine.StateReport.prototype.setTimestampReadable = function(value) {
  return jspb.Message.setProto3StringField(this, 51, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.machine.StateReportList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.machine.StateReportList.prototype.toObject = function(opt_includeInstance) {
  return proto.machine.StateReportList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.machine.StateReportList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.machine.StateReportList.toObject = function(includeInstance, msg) {
  var f, obj = {
    statereportsList: jspb.Message.toObjectList(msg.getStatereportsList(),
    proto.machine.StateReport.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.machine.StateReportList}
 */
proto.machine.StateReportList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.machine.StateReportList;
  return proto.machine.StateReportList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.machine.StateReportList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.machine.StateReportList}
 */
proto.machine.StateReportList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.machine.StateReport;
      reader.readMessage(value,proto.machine.StateReport.deserializeBinaryFromReader);
      msg.addStatereports(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.machine.StateReportList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.machine.StateReportList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.machine.StateReportList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.machine.StateReportList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatereportsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.machine.StateReport.serializeBinaryToWriter
    );
  }
};


/**
 * repeated StateReport StateReports = 1;
 * @return {!Array<!proto.machine.StateReport>}
 */
proto.machine.StateReportList.prototype.getStatereportsList = function() {
  return /** @type{!Array<!proto.machine.StateReport>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.machine.StateReport, 1));
};


/**
 * @param {!Array<!proto.machine.StateReport>} value
 * @return {!proto.machine.StateReportList} returns this
*/
proto.machine.StateReportList.prototype.setStatereportsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.machine.StateReport=} opt_value
 * @param {number=} opt_index
 * @return {!proto.machine.StateReport}
 */
proto.machine.StateReportList.prototype.addStatereports = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.machine.StateReport, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.machine.StateReportList} returns this
 */
proto.machine.StateReportList.prototype.clearStatereportsList = function() {
  return this.setStatereportsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.machine.SessionStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.machine.SessionStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.machine.SessionStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.machine.SessionStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    paused: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    complete: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    production: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    productionId: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.machine.SessionStatus}
 */
proto.machine.SessionStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.machine.SessionStatus;
  return proto.machine.SessionStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.machine.SessionStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.machine.SessionStatus}
 */
proto.machine.SessionStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPaused(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setComplete(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setProduction(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setProductionId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.machine.SessionStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.machine.SessionStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.machine.SessionStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.machine.SessionStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getPaused();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getComplete();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getProduction();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getProductionId();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.machine.SessionStatus.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.machine.SessionStatus} returns this
 */
proto.machine.SessionStatus.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool paused = 2;
 * @return {boolean}
 */
proto.machine.SessionStatus.prototype.getPaused = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.machine.SessionStatus} returns this
 */
proto.machine.SessionStatus.prototype.setPaused = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool complete = 3;
 * @return {boolean}
 */
proto.machine.SessionStatus.prototype.getComplete = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.machine.SessionStatus} returns this
 */
proto.machine.SessionStatus.prototype.setComplete = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool production = 4;
 * @return {boolean}
 */
proto.machine.SessionStatus.prototype.getProduction = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.machine.SessionStatus} returns this
 */
proto.machine.SessionStatus.prototype.setProduction = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional uint64 production_id = 5;
 * @return {number}
 */
proto.machine.SessionStatus.prototype.getProductionId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.machine.SessionStatus} returns this
 */
proto.machine.SessionStatus.prototype.setProductionId = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.machine.StreamStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.machine.StreamStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.machine.StreamStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.machine.StreamStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    live: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.machine.StreamStatus}
 */
proto.machine.StreamStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.machine.StreamStatus;
  return proto.machine.StreamStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.machine.StreamStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.machine.StreamStatus}
 */
proto.machine.StreamStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLive(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.machine.StreamStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.machine.StreamStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.machine.StreamStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.machine.StreamStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLive();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool live = 1;
 * @return {boolean}
 */
proto.machine.StreamStatus.prototype.getLive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.machine.StreamStatus} returns this
 */
proto.machine.StreamStatus.prototype.setLive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.machine.SolenoidValve = {
  VALVE_UNDEFINED: 0,
  VALVE_DRAIN: 1,
  VALVE_WATER: 2,
  VALVE_MILK: 3,
  VALVE_AIR: 4
};

/**
 * @enum {number}
 */
proto.machine.Mode = {
  UNDEFINED_MODE: 0,
  MANUAL: 1,
  AUTONOMOUS: 2
};

/**
 * @enum {number}
 */
proto.machine.Status = {
  UNDEFINED_STATUS: 0,
  ERROR: 1,
  E_STOP_ACTIVE: 5,
  SLEEPING: 6,
  SHUTTING_DOWN: 9,
  WAKING_UP: 10,
  CALIBRATING: 20,
  IDLE_STATIONARY: 30,
  IDLE_MOVING: 31,
  RINSING_PIPETTE: 40,
  DISPENSING: 50,
  WAITING_FOR_DISPENSE: 55,
  COLLECTING: 60,
  NAVIGATING_IK: 70,
  NAVIGATING_OUTER: 75
};

/**
 * @enum {number}
 */
proto.machine.FluidType = {
  FLUID_UNDEFINED: 0,
  FLUID_DRAIN: 1,
  FLUID_WATER: 2,
  FLUID_MILK: 3
};

goog.object.extend(exports, proto.machine);
