// A Study of Light machine messages

syntax = "proto3";

package machine;
option go_package = "github.com/gkstretton/asol-protos/go/machinepb";

// used in requests
enum SolenoidValve {
	VALVE_UNDEFINED = 0;
	VALVE_DRAIN = 1;
	VALVE_WATER = 2;
	VALVE_MILK = 3;
	VALVE_AIR = 4;
}

enum Mode {
	UNDEFINED_MODE = 0;
	MANUAL = 1;
	AUTONOMOUS = 2;
}

enum Status {
	UNDEFINED_STATUS = 0;
	ERROR = 1;
	E_STOP_ACTIVE = 5;
	SLEEPING = 6;
	SHUTTING_DOWN = 9;
	WAKING_UP = 10;
	CALIBRATING = 20;
	IDLE_STATIONARY = 30;
	IDLE_MOVING = 31;
	RINSING_PIPETTE = 40;
	DISPENSING = 50;
	WAITING_FOR_DISPENSE = 55;
	COLLECTING = 60;
	NAVIGATING_IK = 70;
	NAVIGATING_OUTER = 75;
}

message PipetteState {
	bool spent = 1;
	uint32 vial_held = 2;
	float volume_target_ul = 3;
	// incremented every time a dispense is requested
	uint32 dispense_request_number = 4;
}

message CollectionRequest {
	bool completed = 1;
	uint64 request_number = 2;
	uint64 vial_number = 3;
	float volume_ul = 4;
}

message MovementDetails {
	// ik target from -1 to 1
	float target_x_unit = 1;
	// ik target from -1 to 1
	float target_y_unit = 2;
	// ik z target in mm
	float target_z_ik = 5;
	// fk target in degrees
	float target_ring_deg = 10;
	// fk target in degrees
	float target_yaw_deg = 11;
	// @exclude not adding current positions here, because
	// these reports are sent when something changes, not
	// regularly. Regular info can come through a controls
	// / realtime report.
}

enum FluidType {
	FLUID_UNDEFINED = 0;
	FLUID_DRAIN = 1;
	FLUID_WATER = 2;
	FLUID_MILK = 3;
}
message FluidRequest {
	FluidType fluidType = 1;
	float volume_ml = 2;
	bool complete = 3;
	// if true, open drain while request is taking place
	// (e.g. for rinsing with water)
	bool open_drain = 4;
}

message FluidDetails {
	float bowl_fluid_level_ml = 1;
}

message StateReport {
	// Microseconds since cpu started. Note rollover.
	// uint32 timestamp_cpu_us = 1;
	reserved 1;
	// timestamp in microseconds since unix epoch, UTC. Added
	// by gateway since firmware doesn't know real time.
	uint64 timestamp_unix_micros = 2;
	// incremented on startup, currently 1 byte
	uint64 startup_counter = 3;
	Mode mode = 4;
	Status status = 5;
	// Useful for synchronisation with footage
	bool lights_on = 6;
	PipetteState pipette_state = 10;
	CollectionRequest collection_request = 11;
	MovementDetails movement_details = 12;
	FluidRequest fluid_request = 13;
	FluidDetails fluid_details = 14;
	// the following are populated by the backend, useful in post-processing
	bool paused = 50;
	string timestamp_readable = 51;
	// e.g. 1 for 0001.jpg
	uint64 latest_dslr_file_number = 52;
}

message StateReportList {
	repeated StateReport StateReports = 1;
}

/////////////////////////////////////////////
// BACKEND STUFF
// MAYBE MAKE SEPARATE PROTO IN FUTURE
/////////////////////////////////////////////

message SessionStatus {
	uint64 id = 1;
	bool paused = 2;
	bool complete = 3;
	bool production = 4;
	uint64 production_id = 5;
}

message StreamStatus {
	bool live = 1;
}

message DispenseMetadataMap {
	// [startupCounter]_[dispenseRequestNumber]
	map<string, DispenseMetadata> dispense_metadata = 1;
}

message DispenseMetadata {
	bool failedDispense = 1;
	// how many ms later than expected the dispense happened
	uint64 dispenseDelayMs = 2;
}

enum ContentType {
	CONTENT_TYPE_UNDEFINED = 0;
	CONTENT_TYPE_LONGFORM = 1;
	CONTENT_TYPE_SHORTFORM = 2;
	CONTENT_TYPE_CLEANING = 3;
	CONTENT_TYPE_DSLR = 4;
	CONTENT_TYPE_STILL = 5;
}

// statuses for all the content types for a specific session
message ContentTypeStatuses {
	repeated ContentTypeStatus content_statuses = 1;
}

message ContentTypeStatus {
	ContentType content_type = 1;
	string raw_title = 2;
	string raw_description = 3;
	string caption = 4;
	repeated Post posts = 5;
}

enum SocialPlatform {
	SOCIAL_PLATFORM_UNDEFINED = 0;
	SOCIAL_PLATFORM_YOUTUBE = 1;
	SOCIAL_PLATFORM_TIKTOK = 2;
	SOCIAL_PLATFORM_INSTAGRAM = 3;
	SOCIAL_PLATFORM_FACEBOOK = 4;
	SOCIAL_PLATFORM_TWITTER = 5;
	SOCIAL_PLATFORM_REDDIT = 6;
}

message Post {
	SocialPlatform platform = 1;
	// e.g. subreddit
	string sub_platform = 2;
	string title = 3;
	string description = 4;
	bool uploaded = 5;
	string url = 6;
	// if true and relevant, crosspost rather than reuploading, e.g. for reddit
	bool crosspost = 7;
	// seconds ts of when to publish. If 0, publish immediately, because 0 is in the past.
	uint64 scheduled_unix_timetamp = 8;
}